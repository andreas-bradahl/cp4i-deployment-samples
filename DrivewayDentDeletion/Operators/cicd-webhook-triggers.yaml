apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-pipeline
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}
# er-pull-secret used to pull images from ER in Dockerfiles

---

apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-source
spec:
  type: git
  params:
    - name: revision
      value: "{{BRANCH}}"
    - name: url
      value: "{{FORKED_REPO}}"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image tag
    - name: dockerfile
      type: string
      description: The dockerfile
    - name: contextPath
      type: string
      description: The context to run the commands
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build-step
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah --storage-driver vfs build-using-dockerfile -f /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/$(params.dockerfile) -t image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag) /workspace/git-source/DrivewayDentDeletion/$(params.contextPath)"
    - name: list-images-step
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah images -a"
    - name: push-step
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah --storage-driver vfs push --tls-verify=false image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"
---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image name
    - name: releaseName
      type: string
      description: release name of the deployment
    - name: releaseScript
      type: string
      description: release name of script
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:latest
      script: "/workspace/git-source/products/bash/$(params.releaseScript) -n {{NAMESPACE}} -r $(params.releaseName) -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:latest
      script: "/workspace/git-source/DrivewayDentDeletion/Operators/test-api-e2e.sh -n {{NAMESPACE}} -t $(params.imageTag)"

---

# this task is to push the images that our tested to test/prod namespace
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: image-push-to-test
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image tag
  steps:
    - name: pull
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah pull --tls-verify=false image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"
    - name: list-images-before
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah images -a" 
    - name: retag
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah tag image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag) image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}-test/$(params.imageName):$(params.imageTag)-test"
    - name: list-images-after
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah images -a"    
    - name: push-to-test
      image: quay.io/buildah/stable:latest
      securityContext:
        runAsUser: 0
        privileged: true
      command:
        - sh
        - -c
        - "buildah push --tls-verify=false image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}-test/$(params.imageName):$(params.imageTag)-test"

---

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: main-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    - name: git-source
      type: git
  tasks:
    - name: build-mq
      taskRef:
        name: build-task
      params:
        - name: imageName
          value: "mq-ddd"
        - name: imageTag
          value: "latest"
        - name: dockerfile
          value: "MQ.Dockerfile"
        - name: contextPath
          value: ""
      resources:
        inputs:
          - name: git-source
            resource: git-source
    # - name: deploy-mq
    #   runAfter:
    #     - build-mq
    #   taskRef:
    #     name: deploy-task
    #   params:
    #     - name: imageTag
    #       value: "latest"
    #     - name: imageName
    #       value: "mq-ddd"
    #     - name: releaseName
    #       value: "mq-ddd-qm"
    #     - name: releaseScript
    #       value: release-mq.sh
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-api
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    #     - name: dockerfile
    #       value: "ACE-API.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-api"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-acme
    #   runAfter:
    #     - build-ace-int-server-ace-api
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    #     - name: dockerfile
    #       value: "ACE-Acme.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-acme"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-bernie
    #   runAfter:
    #     - build-ace-int-server-ace-acme
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    #     - name: dockerfile
    #       value: "ACE-Bernie.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-bernie"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: build-ace-int-server-ace-chris
    #   runAfter:
    #     - build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    #     - name: dockerfile
    #       value: "ACE-Chris.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-chris"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-api
    #   runAfter:
    #     - build-ace-int-server-ace-api
    #   taskRef:
    #     name: deploy-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    #     - name: releaseName
    #       value: "ace-api-int-srv"
    #     - name: releaseScript
    #       value: release-ace-integration-server.sh
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-bernie
    #   runAfter:
    #     - build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: deploy-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    #     - name: releaseName
    #       value: "ace-bernie-int-srv"
    #     - name: releaseScript
    #       value: release-ace-integration-server.sh
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-acme
    #   runAfter:
    #     - build-ace-int-server-ace-acme
    #   taskRef:
    #     name: deploy-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    #     - name: releaseName
    #       value: "ace-acme-int-srv"
    #     - name: releaseScript
    #       value: release-ace-integration-server.sh
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: deploy-ace-int-server-ace-chris
    #   runAfter:
    #     - build-ace-int-server-ace-chris
    #   taskRef:
    #     name: deploy-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    #     - name: releaseName
    #       value: "ace-chris-int-srv"
    #     - name: releaseScript
    #       value: release-ace-integration-server.sh
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: api-test
    #   runAfter:
    #     - deploy-ace-int-server-ace-chris
    #     - deploy-mq
    #     - deploy-ace-int-server-ace-api
    #     - deploy-ace-int-server-ace-acme
    #     - deploy-ace-int-server-ace-bernie
    #   taskRef:
    #     name: test-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #   resources:
    #     inputs:
    #       - name: git-source
    #         resource: git-source
    # - name: image-push-to-test-ace-chris
    #   runAfter:
    #     - api-test
    #   taskRef:
    #     name: image-push-to-test
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-chris"
    # - name: image-push-to-test-ace-acme
    #   runAfter:
    #     - api-test
    #   taskRef:
    #     name: image-push-to-test
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-acme"
    # - name: image-push-to-test-ace-bernie
    #   runAfter:
    #     - api-test
    #   taskRef:
    #     name: image-push-to-test
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-bernie"
    # - name: image-push-to-test-ace-api
    #   runAfter:
    #     - api-test
    #   taskRef:
    #     name: image-push-to-test
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ace-api"
    # - name: image-push-to-test-mq
    #   # runAfter:
    #     # - build-mq
    #     # - image-push-to-test-ace-api
    #   taskRef:
    #     name: image-push-to-test
    #   params:
    #     - name: imageTag
    #       value: "latest"
    #     - name: imageName
    #       value: "mq-ddd"

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: main-triggertemplate
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      name: main-pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: main-pipeline
      serviceAccountNames:
        - taskName: build-mq
          serviceAccountName: cicd-mq-sa
        - taskName: deploy-mq
          serviceAccountName: cicd-mq-sa
        - taskName: build-ace-int-server-ace-api
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-bernie
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-acme
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-chris
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-api
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-chris
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-acme
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-bernie
          serviceAccountName: cicd-ace-sa
        - taskName: image-push-to-test-ace-api
          serviceAccountName: cicd-{{NAMESPACE}}-test-push-images
        - taskName: image-push-to-test-ace-bernie
          serviceAccountName: cicd-{{NAMESPACE}}-test-push-images
        - taskName: image-push-to-test-ace-acme
          serviceAccountName: cicd-{{NAMESPACE}}-test-push-images
        - taskName: image-push-to-test-ace-chris
          serviceAccountName: cicd-{{NAMESPACE}}-test-push-images
      resources:
      - name: git-source
        resourceRef:
          name: git-source
      params:
      - name: imageTag
        value: $(uid)

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: main-trigger
spec:
  serviceAccountName: cicd-pipeline
  triggers:
  - template:
      name: main-triggertemplate

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: main-trigger
  name: el-main-trigger
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: ""
    name: el-main-trigger
    weight: null

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-role
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
# secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ace-int-srv-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["appconnect.ibm.com"]
  resources: ["designerauthorings", "dashboards", "switchservers", "configurations", "integrationservers"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-ace-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ace-int-srv-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-ace-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ace-int-srv-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mq-qm-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["mq.ibm.com"]
  resources: ["queuemanagers", "queuemanagers/finalizers", "queuemanagers/status"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-mq-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mq-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-mq-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mq-qm-role

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-{{NAMESPACE}}-test-push-images
secrets:
  - name: cicd-{{NAMESPACE}}-test
