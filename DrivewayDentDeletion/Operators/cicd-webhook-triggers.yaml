apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-pipeline
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}
# er-pull-secret used to pull images from ER in Dockerfiles
# As this is a single namespace deployment we don't need multiple service accounts for every product

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildah-mq
spec:
  storageClassName: cp4i-block-performance
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildah-ace-api
spec:
  storageClassName: cp4i-block-performance
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildah-ace-acme
spec:
  storageClassName: cp4i-block-performance
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildah-ace-bernie
spec:
  storageClassName: cp4i-block-performance
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildah-ace-chris
spec:
  storageClassName: cp4i-block-performance
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-source
spec:
  type: git
  params:
    - name: revision
      value: "{{BRANCH}}"
    - name: url
      value: "{{FORKED_REPO}}"

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image name
    - name: dockerfile
      type: string
      description: The dockerfile
    - name: contextPath
      type: string
      description: The context to run the commands
    - name: pvc
      type: string
      description: The PVC to use for layers
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: build
      image: quay.io/buildah/stable:latest
      securityContext:
        privileged: true
      script: |
        df -h /var/lib/containers
        buildah --storage-driver vfs bud \
          -f /workspace/git-source/DrivewayDentDeletion/Operators/Dockerfiles/$(params.dockerfile) \
          -t image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag) \
          /workspace/git-source/DrivewayDentDeletion/$(params.contextPath)
        buildah --storage-driver vfs push \
          --tls-verify=false \
          image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)
        df -h /var/lib/containers
      volumeMounts:
         - mountPath: /var/lib/containers
           name: varlibcontainers
      resources:
        requests:
          memory: "4Gi"
          cpu: "1"
          ephemeral-storage: "1Gi"
        limits:
          ephemeral-storage: "1Gi"
  volumes:
    - name: varlibcontainers
      persistentVolumeClaim:
        claimName: $(params.pvc)

---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
    - name: imageName
      type: string
      description: The image name
    - name: releaseName
      type: string
      description: release name of the deployment
    - name: releaseScript
      type: string
      description: release name of script
  resources:
    inputs:
      - name: git-source
        type: git
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:latest
      script: "/workspace/git-source/products/bash/$(params.releaseScript) -n {{NAMESPACE}} -r $(params.releaseName) -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/$(params.imageName):$(params.imageTag)"

---

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: main-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  resources:
    - name: git-source
      type: git
  tasks:
    - name: build-mq
      taskRef:
        name: build-task
      params:
        - name: imageName
          value: "mq-ddd"
        - name: imageTag
          value: "latest"
        - name: dockerfile
          value: "MQ.Dockerfile"
        - name: contextPath
          value: ""
        - name: pvc
          value: "buildah-mq"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-mq
      runAfter:
        - build-mq
      taskRef:
        name: deploy-task
      params:
        - name: imageTag
          value: "latest"
        - name: imageName
          value: "mq-ddd"
        - name: releaseName
          value: "mq-ddd-qm"
        - name: releaseScript
          value: release-mq.sh
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: build-ace-int-server-ace-api
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-api"
        - name: dockerfile
          value: "ACE-API.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-api"
        - name: pvc
          value: "buildah-ace-api"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: build-ace-int-server-ace-acme
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-acme"
        - name: dockerfile
          value: "ACE-Acme.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-acme"
        - name: pvc
          value: "buildah-ace-acme"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: build-ace-int-server-ace-bernie
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-bernie"
        - name: dockerfile
          value: "ACE-Bernie.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-bernie"
        - name: pvc
          value: "buildah-ace-bernie"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: build-ace-int-server-ace-chris
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-chris"
        - name: dockerfile
          value: "ACE-Chris.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-chris"
        - name: pvc
          value: "buildah-ace-chris"
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-ace-int-server-ace-api
      runAfter:
        - build-ace-int-server-ace-api
      taskRef:
        name: deploy-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-api"
        - name: releaseName
          value: "ace-api-int-srv"
        - name: releaseScript
          value: release-ace-integration-server.sh
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-ace-int-server-ace-bernie
      runAfter:
        - build-ace-int-server-ace-bernie
      taskRef:
        name: deploy-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-bernie"
        - name: releaseName
          value: "ace-bernie-int-srv"
        - name: releaseScript
          value: release-ace-integration-server.sh
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-ace-int-server-ace-acme
      runAfter:
        - build-ace-int-server-ace-acme
      taskRef:
        name: deploy-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-acme"
        - name: releaseName
          value: "ace-acme-int-srv"
        - name: releaseScript
          value: release-ace-integration-server.sh
      resources:
        inputs:
          - name: git-source
            resource: git-source
    - name: deploy-ace-int-server-ace-chris
      runAfter:
        - build-ace-int-server-ace-chris
      taskRef:
        name: deploy-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ace-chris"
        - name: releaseName
          value: "ace-chris-int-srv"
        - name: releaseScript
          value: release-ace-integration-server.sh
      resources:
        inputs:
          - name: git-source
            resource: git-source

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: main-triggertemplate
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      name: main-pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: main-pipeline
      serviceAccountNames:
        - taskName: build-mq
          serviceAccountName: cicd-mq-sa
        - taskName: deploy-mq
          serviceAccountName: cicd-mq-sa
        - taskName: build-ace-int-server-ace-api
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-bernie
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-acme
          serviceAccountName: cicd-ace-sa
        - taskName: build-ace-int-server-ace-chris
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-api
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-chris
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-acme
          serviceAccountName: cicd-ace-sa
        - taskName: deploy-ace-int-server-ace-bernie
          serviceAccountName: cicd-ace-sa
      resources:
      - name: git-source
        resourceRef:
          name: git-source
      params:
      - name: imageTag
        value: $(uid)

---

apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: main-trigger
spec:
  serviceAccountName: cicd-pipeline
  triggers:
  - template:
      name: main-triggertemplate

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: main-trigger
  name: el-main-trigger
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: ""
    name: el-main-trigger
    weight: null

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-role
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
# secrets are only needed for Github/Gitlab interceptors, serviceaccounts only for per trigger authorization
  resources: ["configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-pipeline
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ace-int-srv-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["appconnect.ibm.com"]
  resources: ["designerauthorings", "dashboards", "switchservers", "configurations", "integrationservers"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-ace-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ace-int-srv-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-ace-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ace-int-srv-role

---

# Ace Integration Service account configuration
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mq-qm-role
rules:
# Permissions for appconnect integration server
- apiGroups: ["mq.ibm.com"]
  resources: ["queuemanagers", "queuemanagers/finalizers", "queuemanagers/status"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd-mq-sa
secrets:
  - name: er-pull-secret
  - name: cicd-{{NAMESPACE}}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mq-rolebinding
subjects:
- kind: ServiceAccount
  name: cicd-mq-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mq-qm-role
